{"version":3,"file":"progress.service.js","sourceRoot":"","sources":["../inlined/service/progress.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\nimport 'rxjs/add/observable/timer';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/takeWhile';\n\n/** Helper */\nconst clamp = (n, min, max) => {\n  if (n < min) return min;\n  if (n > max) return max;\n  return n;\n};\n\n\nexport class NgProgressService {\n\n  progress = 0;\n  maximum = 1;\n  minimum = 0.08;\n  speed = 200;\n  trickleSpeed = 300;\n\n  /** Progress state */\n  state = new Subject();\n  /** Trickling stream */\n  trickling = new Subject();\n\n  constructor() {\n\n    this.trickling.switchMap(() => {\n      return Observable\n        .timer(0, this.trickleSpeed)\n        .takeWhile(() => this.isStarted())\n        .do(() => this.inc());\n    }).subscribe();\n  }\n\n  /** Start */\n  start() {\n    if (!this.isStarted()) this.set(this.minimum);\n    this.trickling.next();\n  }\n\n  /** Done */\n  done() {\n    /** if started complete the progress */\n    if (this.isStarted()) {\n      this.set(.3 + .5 * Math.random());\n      this.set(this.maximum);\n    }\n  }\n\n  /** Increment Progress */\n  inc(amount?) {\n    let n = this.progress;\n    /** if it hasn't start, start */\n    if (!this.isStarted()) this.start();\n    else {\n      if (typeof amount !== 'number') {\n        if (n >= 0 && n < 0.2) amount = 0.1;\n        else if (n >= 0.2 && n < 0.5) amount = 0.04;\n        else if (n >= 0.5 && n < 0.8) amount = 0.02;\n        else if (n >= 0.8 && n < 0.99) amount = 0.005;\n        else amount = 0;\n      }\n      n = clamp(n + amount, 0, 0.994);\n      this.set(n);\n    }\n  }\n\n  /** Set progress state */\n  set(n) {\n    this.progress = clamp(n, this.minimum, this.maximum);\n    this.updateState(this.progress, true);\n    /** if progress completed */\n    if (n === this.maximum) {\n      let hide = () => {\n        /** reset progress\n         * Keep it { 0, false } to fadeOut progress-bar after complete */\n        this.progress = 0;\n        this.updateState(this.progress, false);\n      };\n      let complete = () => {\n        /** complete progressbar\n         * { 1, false } to complete progress-bar before hiding */\n        this.updateState(this.progress, false);\n        setTimeout(hide, this.speed);\n      };\n      setTimeout(complete, this.speed);\n    }\n  }\n\n  /** Is progress started*/\n  isStarted() {\n    return this.progress > 0 && this.progress < this.maximum;\n  }\n\n  /** Update Progressbar State */\n  updateState(progress, active) {\n    this.state.next({\n      value: progress,\n      active: active\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
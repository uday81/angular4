{"version":3,"file":"browser-xhr.provider.js","sourceRoot":"","sources":["../inlined/service/browser-xhr.provider.ts"],"names":[],"mappings":";;;;;OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;OACnC,EAAE,UAAU,EAAE,MAAM,eAAe;OAEnC,EAAE,iBAAiB,EAAE,MAAM,oBAAoB;AAGtD;IAAgD,8CAAU;IAItD,oCAAoB,OAA0B;QAC1C,iBAAO,CAAC;QADQ,YAAO,GAAP,OAAO,CAAmB;QAF9C,mBAAc,GAAW,CAAC,CAAC;IAI3B,CAAC;IAED,0CAAK,GAAL;QAAA,iBAkBC;QAjBG,IAAI,GAAG,GAAG,gBAAK,CAAC,KAAK,WAAE,CAAC;QAExB,GAAG,CAAC,MAAM,GAAG,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,IAAI,EAAE,EAAX,CAAW,CAAC;QAClC,GAAG,CAAC,OAAO,GAAG,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,IAAI,EAAE,EAAX,CAAW,CAAC;QACnC,GAAG,CAAC,OAAO,GAAG,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,IAAI,EAAE,EAAX,CAAW,CAAC;QAEnC,GAAG,CAAC,WAAW,GAAG,UAAC,KAAK;YACpB,KAAI,CAAC,cAAc,EAAE,CAAC;YACtB,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;gBAAC,KAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YACpD,oCAAoC;YACpC,gCAAgC;QACpC,CAAC,CAAC;QAEF,iDAAiD;QACjD,kCAAkC;QAElC,MAAM,CAAM,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC;IAEO,yCAAI,GAAZ;QACI,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QACxB,CAAC;IACL,CAAC;IACE,qCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,yCAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,iBAAiB,GAAG;KAC1B,CAAC;IACF,iCAAC;AAAD,CAAC,AAzCD,CAAgD,UAAU,GAyCzD","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BrowserXhr } from '@angular/http';\n\nimport { NgProgressService } from './progress.service';\n\n\nexport class NgProgressCustomBrowserXhr extends BrowserXhr {\n\n    currentRequest: number = 0;\n\n    constructor(private service: NgProgressService) {\n        super();\n    }\n\n    build(): any {\n        let xhr = super.build();\n\n        xhr.onload = (evt) => this.done();\n        xhr.onerror = (evt) => this.done();\n        xhr.onabort = (evt) => this.done();\n\n        xhr.onloadstart = (event) => {\n            this.currentRequest++;\n            if (!this.service.isStarted()) this.service.start();\n            // TODO: do some progress magic here\n            // if (event.lengthComputable) {\n        };\n\n        // TODO: use event information to compute pending\n        // xhr.onprogress = (event) => {};\n\n        return <any>(xhr);\n    }\n\n    private done() {\n        this.currentRequest--;\n        if (this.currentRequest === 0) {\n            this.service.done();\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgProgressService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var BehaviorSubject_1 = require('rxjs/BehaviorSubject');
var ng2_ya_table_languages_1 = require('./ng2-ya-table-languages');
var sortCycle = ['asc', 'desc', null];
var getNextSortOrder = function (currentSortOrder) {
    var nextIndex = (sortCycle.indexOf(currentSortOrder) + 1) % sortCycle.length;
    return sortCycle[nextIndex];
};
var Ng2YaTableService = (function () {
    function Ng2YaTableService() {
        this.stateChangedSource = new BehaviorSubject_1.BehaviorSubject(this);
        this.showFilterRow = false;
        this.orderMulti = true;
        this.sortStack = [];
        this.language = null;
        this.stateChanged$ = this.stateChangedSource.asObservable();
    }
    Ng2YaTableService.prototype.setOptions = function (options) {
        this.orderMulti = !!options.orderMulti ? options.orderMulti : true;
        this.language = typeof options.language === "string" ? ng2_ya_table_languages_1.Languages[options.language] : options.language;
    };
    Ng2YaTableService.prototype.setColumns = function (columns) {
        var _this = this;
        this.columns = columns.map(function (c) {
            if (!!c.filter) {
                _this.showFilterRow = true;
            }
            var column = {
                filterValue: null,
                sortOrder: c.defaultSortOrder,
                def: c,
                hasSort: c.sort,
                hasFilter: !!c.filter
            };
            if (!!column.sortOrder) {
                _this.sortStack.push(column);
            }
            return column;
        });
    };
    Ng2YaTableService.prototype.setPaging = function (paging) {
        this.paging = {
            currentPage: 1,
            itemsPerPage: paging.itemsPerPage,
            recordsTotal: 0,
            recordsFiltered: 0
        };
    };
    Ng2YaTableService.prototype.toggleSort = function (colState, orderMulti) {
        colState.sortOrder = getNextSortOrder(colState.sortOrder);
        if (orderMulti) {
            var curIndex = this.sortStack.indexOf(colState);
            if (curIndex === -1) {
                this.sortStack.push(colState);
            }
            else if (!colState.sortOrder) {
                this.sortStack.splice(curIndex, 1);
            }
        }
        else {
            this.sortStack = colState.sortOrder ? [colState] : [];
            this.columns.forEach(function (column) {
                if (column !== colState) {
                    column.sortOrder = null;
                }
            });
        }
        this.notify();
    };
    Ng2YaTableService.prototype.changePaging = function (page, itemsPerPage) {
        this.paging.currentPage = page;
        this.paging.itemsPerPage = itemsPerPage;
        this.notify();
    };
    Ng2YaTableService.prototype.changeFilter = function (column) {
        this.paging.currentPage = 1;
        this.notify();
    };
    Ng2YaTableService.prototype.notify = function () {
        this.stateChangedSource.next(this);
    };
    Ng2YaTableService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Ng2YaTableService);
    return Ng2YaTableService;
}());
exports.Ng2YaTableService = Ng2YaTableService;
//# sourceMappingURL=ng2-ya-table.service.js.map